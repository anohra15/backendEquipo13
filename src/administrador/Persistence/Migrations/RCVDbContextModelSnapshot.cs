// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using administrador.Persistence.Database;

namespace administrador.Persistence.Migrations
{
    [DbContext(typeof(RCVDbContext))]
    partial class RCVDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("uuid-ossp")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("IncidentesEntityPolizaEntity", b =>
                {
                    b.Property<Guid>("incidentesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("polizaId")
                        .HasColumnType("uuid");

                    b.HasKey("incidentesId", "polizaId");

                    b.HasIndex("polizaId");

                    b.ToTable("IncidentesEntityPolizaEntity");
                });

            modelBuilder.Entity("administrador.Persistence.Entities.AseguradoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("PolizaEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("ci")
                        .HasColumnType("integer");

                    b.Property<string>("primer_a")
                        .HasColumnType("text");

                    b.Property<string>("primer_n")
                        .HasColumnType("text");

                    b.Property<string>("segundo_a")
                        .HasColumnType("text");

                    b.Property<string>("segundo_n")
                        .HasColumnType("text");

                    b.Property<char>("sexo")
                        .HasColumnType("character(1)");

                    b.HasKey("Id");

                    b.HasIndex("PolizaEntityId");

                    b.ToTable("asegurado");
                });

            modelBuilder.Entity("administrador.Persistence.Entities.CarrosEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("marca")
                        .HasColumnType("uuid");

                    b.Property<string>("placa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("seguroId")
                        .HasColumnType("uuid");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("seguroId");

                    b.ToTable("cars");
                });

            modelBuilder.Entity("administrador.Persistence.Entities.IncidentesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("UsuariosEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("DATE");

                    b.Property<string>("ubicacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UsuariosEntityId");

                    b.ToTable("incident");
                });

            modelBuilder.Entity("administrador.Persistence.Entities.PolizaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("desactivada")
                        .HasColumnType("boolean");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("vencimiento")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.ToTable("poliza");
                });

            modelBuilder.Entity("administrador.Persistence.Entities.UsuariosEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("IncidentesEntityPolizaEntity", b =>
                {
                    b.HasOne("administrador.Persistence.Entities.IncidentesEntity", null)
                        .WithMany()
                        .HasForeignKey("incidentesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("administrador.Persistence.Entities.PolizaEntity", null)
                        .WithMany()
                        .HasForeignKey("polizaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("administrador.Persistence.Entities.AseguradoEntity", b =>
                {
                    b.HasOne("administrador.Persistence.Entities.PolizaEntity", null)
                        .WithMany("asegurado")
                        .HasForeignKey("PolizaEntityId");
                });

            modelBuilder.Entity("administrador.Persistence.Entities.CarrosEntity", b =>
                {
                    b.HasOne("administrador.Persistence.Entities.PolizaEntity", "seguro")
                        .WithMany()
                        .HasForeignKey("seguroId");

                    b.Navigation("seguro");
                });

            modelBuilder.Entity("administrador.Persistence.Entities.IncidentesEntity", b =>
                {
                    b.HasOne("administrador.Persistence.Entities.UsuariosEntity", null)
                        .WithMany("admin")
                        .HasForeignKey("UsuariosEntityId");
                });

            modelBuilder.Entity("administrador.Persistence.Entities.PolizaEntity", b =>
                {
                    b.Navigation("asegurado");
                });

            modelBuilder.Entity("administrador.Persistence.Entities.UsuariosEntity", b =>
                {
                    b.Navigation("admin");
                });
#pragma warning restore 612, 618
        }
    }
}
